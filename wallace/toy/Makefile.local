#*********************************************************************************************************************#
#                                                                                                                     #
#                                                    Wallace                                                          #
#                                                                                                                     #
#                               François Pottier, projet Cristal, INRIA Rocquencourt                                  #
#                                                                                                                     #
#    Copyright 2000 Institut National de Recherche en Informatique et Automatique. Distributed only by permission.    #
#                                                                                                                     #
#*********************************************************************************************************************#
# $Header: /home/pauillac/formel1/fpottier/cvs/toy/Makefile.local,v 1.7 2000/02/11 16:16:31 fpottier Exp $

# ---------------------------------------------------------------------------------------------------------------------
# Directories.

GROMITDIR=../gromit
WALLACEDIR=../wallace

# ---------------------------------------------------------------------------------------------------------------------
# Choices for the executables.

CAMLC=ocamlc
CAMLLEX=ocamllex
CAMLYACC=ocamlyacc
CAMLDEP=ocamldep
CAMLOPT=ocamlopt
CAMLMKTOP=ocamlmktop
CAMLWEB=ocamlweb
GROMIT=$(GROMITDIR)/gromit
WALLACE=$(WALLACEDIR)/wallace.cma

# ---------------------------------------------------------------------------------------------------------------------
# Compile options.

INCLUDE=-I $(WALLACEDIR)
COMPFLAGS=-g $(INCLUDE)

# ---------------------------------------------------------------------------------------------------------------------
# Building.

OBJS=mlAlgebra.cmo mlAlgebra_parser.cmo mlAlgebra_lexer.cmo env.cmo simpleEnv.cmo context.cmo token.cmo toyParserUtil.cmo toySyntax.cmo internalSyntax.cmo compile.cmo engine.cmo toyParser.cmo toyLexer.cmo toy.cmo

toy: $(WALLACE) $(OBJS)
	$(CAMLC) $(COMPFLAGS) $^ -o $@

clean::
	rm -f toy .generated-dependencies *.cmi *.cmx *.cmo *.ppo *.o *~ #*#

depend: beforedepend
	rm -f .generated-dependencies
	$(CAMLDEP) $(INCLUDE) *.mli *.ml > .generated-dependencies

# ---------------------------------------------------------------------------------------------------------------------
# Staged parts

STAGED_OBJS=stagedCommon.cmo stagedParser.cmo stagedLexer.cmo stagedTypes.cmo stagedTranslate.cmo stagedPrint.cmo stagedEval.cmo stagedToToy.cmo stagedMain.cmo
STAGED_LEXER_SOURCE=stagedLexer.mll
STAGED_LEXER_TARGET=stagedLexer.ml

STAGED_PARSER_SOURCE=stagedParser.mly
STAGED_PARSER_TARGET=stagedParser.ml stagedParser.mli

staged: $(WALLACE) $(OBJS) $(STAGED_OBJS)
	$(CAMLC) $(COMPFLAGS) $^ -o $@

$(STAGED_PARSER_TARGET): $(STAGED_PARSER_SOURCE)
	$(CAMLYACC) $^

$(STAGED_LEXER_TARGET): $(STAGED_LEXER_SOURCE)
	$(CAMLLEX) $^

clean::
	rm -f $(STAGED_LEXER_TARGET) $(STAGED_PARSER_TARGET) staged

beforedepend:: $(STAGED_LEXER_TARGET) $(STAGED_PARSER_TARGET)

# ---------------------------------------------------------------------------------------------------------------------
# Part of the code is generated by Gromit.

ALGEBRA_TARGET=mlAlgebra.ml mlAlgebra_parser.mly
ALGEBRA_SOURCE=mlAlgebra.grm

$(ALGEBRA_TARGET): $(GROMIT) $(ALGEBRA_SOURCE)
	@rm -f $(ALGEBRA_TARGET)
	$(GROMIT) $(ALGEBRA_SOURCE)

clean::
	rm -f $(ALGEBRA_TARGET)

beforedepend:: $(ALGEBRA_TARGET)

# ---------------------------------------------------------------------------------------------------------------------
# Generating a lexer & a parser for types.

TYPE_LEXER_TARGET=mlAlgebra_lexer.ml
TYPE_LEXER_SOURCE=mlAlgebra_lexer.mll

DUMMY_TYPE=my_dummy_type
PROBLEMATIC_TYVAR=a

$(TYPE_LEXER_TARGET): $(TYPE_LEXER_SOURCE)
	@rm -f $@
	$(CAMLLEX) $^

clean::
	rm -f $(TYPE_LEXER_TARGET)

beforedepend:: $(TYPE_LEXER_TARGET)

TYPE_PARSER_TARGET=mlAlgebra_parser.ml mlAlgebra_parser.mli
TYPE_PARSER_SOURCE=mlAlgebra_parser.mly

$(TYPE_PARSER_TARGET): $(TYPE_PARSER_SOURCE)
	@rm -f $(TYPE_PARSER_TARGET)
	sed -i "s/'$(PROBLEMATIC_TYVAR)/$(DUMMY_TYPE)/" $^
	$(CAMLYACC) $^
	sed -i "s/$(DUMMY_TYPE)/'$(PROBLEMATIC_TYVAR)/" $(TYPE_PARSER_TARGET)

clean::
	rm -f $(TYPE_PARSER_TARGET)

beforedepend:: $(TYPE_PARSER_TARGET)

# ---------------------------------------------------------------------------------------------------------------------
# Generating a lexer & a parser for expressions.

TOY_LEXER_TARGET=toyLexer.ml
TOY_LEXER_SOURCE=toyLexer.mll

$(TOY_LEXER_TARGET): $(TOY_LEXER_SOURCE)
	@rm -f $@
	$(CAMLLEX) $^

clean::
	rm -f $(TOY_LEXER_TARGET)

beforedepend:: $(TOY_LEXER_TARGET)

TOY_PARSER_TARGET=toyParser.ml toyParser.mli
TOY_PARSER_SOURCE=toyParser.mly

$(TOY_PARSER_TARGET): $(TOY_PARSER_SOURCE)
	@rm -f $(TOY_PARSER_TARGET)
	$(CAMLYACC) $^

clean::
	rm -f $(TOY_PARSER_TARGET)

beforedepend:: $(TOY_PARSER_TARGET)

# ---------------------------------------------------------------------------------------------------------------------
# Building the documentation.

SOURCES=env.ml simpleEnv.mli simpleEnv.ml context.ml token.mli token.ml toyParserUtil.ml toySyntax.ml internalSyntax.ml compile.mli compile.ml engine.mli engine.ml toy.ml

doc: map.ps toy.dvi

map.ps: depend
	rm -f map.ps; cat .generated-dependencies | ocamldot | dot -Tps > map.ps

toy.dvi: $(SOURCES) toy.tex
	$(CAMLWEB) -o toy-auto-generated.tex --quiet --no-preamble --latex-sects $(SOURCES) 
	latex toy; latex toy

clean::
	rm -f toy-auto-generated.tex map.ps
	rm -f *.dvi *.log *.aux *.toc
	rm -rf auto

# ---------------------------------------------------------------------------------------------------------------------
# Suffixes.

.SUFFIXES: .mli .cmi .ml .cmo .cmx

.mli.cmi:
	$(CAMLC) $(COMPFLAGS) -c $<

.ml.cmo:
	$(CAMLC) $(COMPFLAGS) -c $<

.ml.cmx:
	$(CAMLOPT) $(OCOMPFLAGS) -c $<

ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),depend)
ifneq ($(MAKECMDGOALS),doc)
include .generated-dependencies
endif
endif
endif

